crawler:
  enabled: true
  replicas: 1

  image:
    repository: "pro.registry.gitlab.metadata.dev.cf-deployments.org/base-infrastructure/docker-registry/cf-ledger-crawler"
    tag: "0.2.6"

  springProfiles: n2n,standalone,kafka

  port: 8080

  monitoringEnabled: false

  kafka:
    enabled: true
    bootstrapServer: kafka-explorer:9092

  redis:
    ## Redis Standalone Values Example
    mode: standalone
    secret:
      name: redis-secret
      key: REDIS_MASTER_PASSWORD
    standalone:
      host: redis-headless
      port: 6379

    ## Redis Cluster Values Example
    # mode: cluster
    # secretName: cf-explorer-infra-redis-cluster
    # cluster:
    #   hosts: cf-explorer-infra-redis-cluster-headless:6379

    master:
      name: mymaster
    sentinel:
      host: cf-explorer-redis-headless

  crawler:
    name: dev-crawler
    blocks:
      topic: local.crawler.blocks
      rollbackTopic: local.crawler.rollback-blocks



  cardano:
    node:
      networkMagic: "764824073"
      address: relays-new.cardano-mainnet.iohk.io
      port: 3001

consumer:
  enabled: true
  replicas: 1

  image:
    repository: "pro.registry.gitlab.metadata.dev.cf-deployments.org/base-infrastructure/docker-registry/cf-ledger-consumer"
    tag: "0.2.13"

  springProfiles: dev

  port: 8080

  monitoringEnabled: false

  postgres:
    schema: mainnet
    secret:
      name: postgres-secrets
      userKey: POSTGRES_USER
      hostKey: POSTGRES_HOST
      portKey: POSTGRES_PORT
      dbKey: POSTGRES_DB
      passwordKey: POSTGRES_PASSWORD

  jpa:
    showSql: false

  kafka:
    host: kafka-explorer
    port: 9092

  crawler:
    blocks:
      topic: local.crawler.blocks

  maximumPoolSize: 64
  jdbcBatchSize: 500
  blocksBatchSize: 1000
  logLevel: debug
  network: mainnet
  networkMagic: "764824073"

explorerApi:
  enabled: true
  replicas: 1

  image:
    repository: "pro.registry.gitlab.metadata.dev.cf-deployments.org/base-infrastructure/docker-registry/cf-explorer-api"
    tag: "0.3.9"

  springProfiles: dev,standalone,koios,s3

  port: 8080

  monitoringEnabled: false

  service:
    type: ClusterIP
  #    nodePort: "30092"

  redis:
    ## Redis Standalone Values Example
    mode: standalone
    secret:
      name: redis-secret
      key: REDIS_MASTER_PASSWORD
    standalone:
      host: redis-headless
      port: 6379

    ## Redis Cluster Values Example
    # mode: cluster
    # secretName: cf-explorer-infra-redis-cluster
    # cluster:
    #   hosts: cf-explorer-infra-redis-cluster-headless:6379

  explorerRewardsUrl: http://cf-explorer-rewards-api

  postgres:
    schema: mainnet
    secret:
      name: postgres-secrets
      userKey: POSTGRES_USER
      hostKey: POSTGRES_HOST
      portKey: POSTGRES_PORT
      dbKey: POSTGRES_DB
      passwordKey: POSTGRES_PASSWORD

  s3:
    bucketName: cf-dev-explorer-monolith-reports
    region: eu-west-1
    endpoint: https://s3-eu-west-1.amazonaws.com
    secret:
      name: infra-other-secrets
      accessKeyKey: access-key
      secretKeyKey: secret-key

explorerRewardsApi:
  enabled: true
  replicas: 1

  image:
    repository: "pro.registry.gitlab.metadata.dev.cf-deployments.org/base-infrastructure/docker-registry/cf-explorer-rewards"
    tag: "0.1.1-SNAPSHOT"

  springProfiles: dev,koios

  port: 8080

  monitoringEnabled: false

  service:
    type: ClusterIP
  #    nodePort: "30092"

  postgres:
    schema: mainnet
    secret:
      name: postgres-secrets
      userKey: POSTGRES_USER
      hostKey: POSTGRES_HOST
      portKey: POSTGRES_PORT
      dbKey: POSTGRES_DB
      passwordKey: POSTGRES_PASSWORD

  network: mainnet

explorerAuthentication:
  enabled: true
  replicas: 1

  image:
    repository: "pro.registry.gitlab.metadata.dev.cf-deployments.org/base-infrastructure/docker-registry/cf-explorer-authentication"
    tag: "v0.1.1-7-g2e0c779"

  springProfiles: dev, standalone

  port: 8080

  monitoringEnabled: false

  service:
    type: ClusterIP
  #    nodePort: "30092"

  redis:
    ## Redis Standalone Values Example
    mode: standalone
    secret:
      name: redis-secret
      key: REDIS_MASTER_PASSWORD
    standalone:
      host: redis-headless
      port: 6379

  postgres:
    schema: mainnet-auth
    secret:
      name: postgres-secrets
      userKey: POSTGRES_USER
      hostKey: POSTGRES_HOST
      portKey: POSTGRES_PORT
      dbKey: POSTGRES_DB
      passwordKey: POSTGRES_PASSWORD

  flywayEnabled: true
  swaggerClientUrl: https://{{ .Values.domain }}
  swaggerServerUrl: http://localhost:8021

explorerFrontEnd:
  enabled: true
  replicas: 1

  image:
    repository: "pro.registry.gitlab.metadata.dev.cf-deployments.org/base-infrastructure/docker-registry/cf-explorer-frontend"
    tag: "0.3.2"

  reactAppApiUrl: "https://api.{{ .Values.network }}.{{ .Values.domain }}/api/v1"
  reactAppPreProdAppUrl: "https://{{ .Values.network }}.{{ .Values.domain }}"
  reactAppPreviewAppUrl: "https://{{ .Values.network }}.{{ .Values.domain }}"
  reactAppMainnetAppUrl: "https://{{ .Values.domain }}"
  reactAppAuthUrl: "https://auth-api.{{ .Values.network }}.{{ .Values.domain }}/api/v1"
  reactAppNetwork: "{{ .Values.network }}"

  port: 80

  service:
    type: ClusterIP
  #    nodePort: "30092"

  jira:
    widget:
      secretName: infra-secrets
      secretKey: REACT_APP_JSD_WIDGET_KEY

consumerSchedules:
  enabled: true
  replicas: 1

  image:
    repository: "pro.registry.gitlab.metadata.dev.cf-deployments.org/base-infrastructure/docker-registry/cf-ledger-consumer-schedules"
    tag: "0.2.2"

  springProfiles: dev,standalone

  port: 8080

  monitoringEnabled: false

  postgres:
    schema: mainnet
    secret:
      name: postgres-secrets
      userKey: POSTGRES_USER
      hostKey: POSTGRES_HOST
      portKey: POSTGRES_PORT
      dbKey: POSTGRES_DB
      passwordKey: POSTGRES_PASSWORD

  kafka:
    bootstrapServer: kafka-explorer:9092
    reportsTopic: dev.explorer.api.reports

  redis:
    ## Redis Standalone Values Example
    mode: standalone
    secret:
      name: redis-secret
      key: REDIS_MASTER_PASSWORD
    standalone:
      host: redis-headless
      port: 6379

  s3:
    bucketName: cf-dev-explorer-monolith-reports
    region: eu-west-1
    endpoint: https://s3-eu-west-1.amazonaws.com
    secret:
      name: infra-other-secrets
      accessKeyKey: access-key
      secretKeyKey: secret-key

  checkRewardUrl: http://cf-explorer-api/api/v1/rewards/fetch

  network: mainnet

cardanoNewsApi:
  enabled: true
  replicas: 1

  image:
    repository: "pro.registry.gitlab.metadata.dev.cf-deployments.org/base-infrastructure/docker-registry/cardano-news-api"
    tag: "0.1.2"

  port: 8080

