crawler:
  enabled: true
  replicas: 1

  image:
    repository: "pro.registry.gitlab.metadata.dev.cf-deployments.org/base-infrastructure/docker-registry/cf-ledger-crawler"
    tag: "0.2.6"

  springProfiles: n2n,standalone

  port: 8080

  monitoringEnabled: false

  kafka:
    enabled: true
    bootstrapServer: kafka-explorer:9092

  redis:
    ## Redis Standalone Values Example
    mode: standalone
    secretName: cf-explorer-infra-redis
    standalone:
      host: cf-explorer-infra-redis-headless
      port: 6379

    ## Redis Cluster Values Example
    # mode: cluster
    # secretName: cf-explorer-infra-redis-cluster
    # cluster:
    #   hosts: cf-explorer-infra-redis-cluster-headless:6379

    master:
      name: mymaster
    sentinel:
      host: cf-explorer-redis-headless

  crawler:
    name: dev-crawler
    blocks:
      topic: local.crawler.blocks
      rollbackTopic: local.crawler.rollback-blocks



  cardano:
    node:
      networkMagic: "764824073"
      address: relays-new.cardano-mainnet.iohk.io
      port: 3001

consumer:
  enabled: true
  replicas: 1

  image:
    repository: "pro.registry.gitlab.metadata.dev.cf-deployments.org/base-infrastructure/docker-registry/cf-ledger-consumer"
    tag: "0.2.13"

  springProfiles: dev

  port: 8080

  monitoringEnabled: false

  postgres:
    host: cf-explorer-infra-postgresql
    port: 5432
    user: cardano-master
    secretName: cf-explorer-infra-postgresql
    dbName: explorer_api
    schema: mainnet

  kafka:
    host: kafka-explorer
    port: 9092

  crawler:
    blocks:
      topic: local.crawler.blocks


  maximumPoolSize: 64
  jdbcBatchSize: 500
  blocksBatchSize: 1000
  logLevel: debug
  network: mainnet
  networkMagic: "764824073"

explorerApi:
  enabled: false
  replicas: 1

  image:
    repository: "pro.registry.gitlab.metadata.dev.cf-deployments.org/base-infrastructure/docker-registry/cf-explorer-api"
    tag: "0.3.9"

  springProfiles: dev, cluster

  port: 8080

  monitoringEnabled: false

  service:
    type: ClusterIP
  #    nodePort: "30092"

  redis:
    ## Redis Standalone Values Example
    mode: standalone
    secretName: cf-explorer-infra-redis
    standalone:
      host: cf-explorer-infra-redis-headless
      port: 6379

    ## Redis Cluster Values Example
    # mode: cluster
    # secretName: cf-explorer-infra-redis-cluster
    # cluster:
    #   hosts: cf-explorer-infra-redis-cluster-headless:6379

  postgres:
    host: cf-explorer-infra-postgresql
    port: 5432
    user: cardano-master
    secretName: cf-explorer-infra-postgresql
    dbName: explorer_api

explorerFrontEnd:
  enabled: false
  replicas: 1

  image:
    repository: "pro.registry.gitlab.metadata.dev.cf-deployments.org/base-infrastructure/docker-registry/cf-explorer-frontend"
    tag: "0.3.2"

    reactAppApiUrl: http://cf-explorer-api:8080/api/v1
#    reactAppApiUrl: https://dev.cf-explorer-monolith-mainnet.metadata.dev.cf-deployments.org:8080/api/v1
    reactAppPreProdApiUrl: https://dev.cf-explorer-monolith-testnets.metadata.dev.cf-deployments.org:18000/api/v1
    reactAppPreviewUrl: https://dev.cf-explorer-monolith-testnets.metadata.dev.cf-deployments.org:18100/api/v1
    reactAppTestnetApiUrl: https://dev.cf-explorer-monolith-testnets.metadata.dev.cf-deployments.org:18200/api/v1
    reactAppMainnetApiUrl: https://dev.cf-explorer-monolith-mainnet.metadata.dev.cf-deployments.org:8080/api/v1
    reactAppAuthUrl: https://dev.cf-explorer-monolith-mainnet.metadata.dev.cf-deployments.org:8080/api/v1

  port: 1102

  service:
    type: ClusterIP
  #    nodePort: "30092"