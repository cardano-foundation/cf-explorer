{{ with .Values.consumerSchedules }}
{{ if .enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cf-ledger-consumer-schedules
spec:
  replicas: {{ .replicas }}
  selector:
    matchLabels:
      app: cf-ledger-consumer-schedules
  template:
    metadata:
      labels:
        app: cf-ledger-consumer-schedules
    spec:
      containers:
        - name: cf-ledger-consumer-schedules
          image: "{{ .image.repository }}:{{ .image.tag }}"

          env:
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .springProfiles }}
            - name: SERVER_PORT
              value: {{ .port | quote }}

            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .postgres.secret.name }}
                  key: {{ .postgres.secret.hostKey }}
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .postgres.secret.name }}
                  key: {{ .postgres.secret.portKey }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .postgres.secret.name }}
                  key: {{ .postgres.secret.userKey }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .postgres.secret.name }}
                  key: {{ .postgres.secret.passwordKey }}
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .postgres.secret.name }}
                  key: {{ .postgres.secret.dbKey }}
            - name: POSTGRES_SCHEMA
              value: {{ .postgres.schema }}

            - name: MAXIMUM_POOL_SIZE
              value: "48"
            - name: META_DATA_JOB_ENABLED
              value: "true"
            - name: REPORT_HISTORY_JOB_ENABLED
              value: "true"
            - name: EXPIRED_REPORTS_RATE
              value: "604800000"

            - name: POOL_OFFLINE_DATA_JOB_ENABLED
              value: "true"
            - name: CRAWL_POOL_DATA_DELAY
              value: "172800000"
            - name: INSERT_POOL_DATA_DELAY
              value: "180000"
            - name: TOKEN_METDATA_URL
              value: https://github.com/cardano-foundation/cardano-token-registry.git
            - name: TOKEN_METADATA_FOLDER
              value: "/mappings"
            - name: NETWORK_NAME
              value: {{ .network }}

            - name: KAFKA_BOOSTRAP_SERVER_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .kafka.bootstrapServersSecret.name }}
                  key: {{ .kafka.bootstrapServersSecret.key }}
            - name: KAFKA_USE_SSL
              value: {{ .kafka.useSsl | default "false" | quote }}
            - name: KAFKA_GROUP_ID
              value: {{ .network }}
            - name: KAFKA_REPORTS_TOPIC
              value: {{ .kafka.reportsTopic }}

            - name: API_CHECK_REWARD_URL
              value: {{ .checkRewardUrl }}
            - name: API_CHECK_POOL_HISTORY_URL
              value: {{ .checkPoolHistoryUrl }}

            - name: TOP_DELEGATORS_FIXED_DELAY
              value: "300000"
            - name: TOKEN_PAGE_CACHE_FIXED_DELAY
              value: "100000"
            - name: TOKEN_PAGE_CACHE_TTL
              value: "300000"
            - name: UNIQUE_ACCOUNT_FIXED_DELAY
              value: "300000"
            - name: UNIQUE_ACCOUNT_ENABLED
              value: "true"

            {{- if eq .redis.mode "sentinel" }}
            - name: REDIS_MASTER_NAME
              value: {{ .redis.master.name }}
            - name: REDIS_SENTINEL_HOST
              value: {{ .redis.sentinel.host }}
            - name: REDIS_SENTINEL_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .redis.secret.name }}
                  key: {{ .redis.secret.key }}
            {{- else if eq .redis.mode "cluster" }}
            - name: REDIS_CLUSTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .redis.cluster.secret.name }}
                  key: {{ .redis.cluster.secret.passwordKey }}
            - name: NODE_ADDRESSES
              valueFrom:
                secretKeyRef:
                  name: {{ .redis.cluster.secret.name }}
                  key: {{ .redis.cluster.secret.endpointKey }}
            {{- else if eq .redis.mode "elasticache" }}
            - name: REDIS_STANDALONE_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .redis.secret.name }}
                  key: REDIS_ENDPOINT
            - name: REDIS_STANDALONE_PORT
              value: "6379"
            - name: REDIS_STANDALONE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .redis.secret.name }}
                  key: {{ .redis.secret.key }}
            {{- else }}
            - name: REDIS_STANDALONE_HOST
              value: {{ .redis.standalone.host }}
            - name: REDIS_STANDALONE_PORT
              value: {{ .redis.standalone.port | quote }}
            - name: REDIS_STANDALONE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .redis.secret.name }}
                  key: {{ .redis.secret.key }}
            - name: REDIS_USE_SSL
              value: {{ .redis.standalone.useSsl | default "false" | quote }}
            {{- end }}

            - name: REPORT_S3_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .s3.secret.name }}
                  key: {{ .s3.secret.bucketNameKey }}
            - name: REPORT_S3_REGION
              valueFrom:
                secretKeyRef:
                  name: {{ .s3.secret.name }}
                  key: {{ .s3.secret.regionKey }}
            - name: REPORT_S3_STORAGE_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: {{ .s3.secret.name }}
                  key: {{ .s3.secret.endpointKey }}
            - name: REPORT_S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .s3.secret.name }}
                  key: {{ .s3.secret.accessKeyKey }}
            - name: REPORT_S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .s3.secret.name }}
                  key: {{ .s3.secret.secretKeyKey }}

            - name: TOKEN_LOGO_S3_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .s3.secret.name }}
                  key: {{ .s3.secret.bucketNameKey }}
            - name: TOKEN_LOGO_S3_REGION
              valueFrom:
                secretKeyRef:
                  name: {{ .s3.secret.name }}
                  key: {{ .s3.secret.regionKey }}
            - name: TOKEN_LOGO_S3_STORAGE_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: {{ .s3.secret.name }}
                  key: {{ .s3.secret.endpointKey }}
            - name: TOKEN_LOGO_S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .s3.secret.name }}
                  key: {{ .s3.secret.accessKeyKey }}
            - name: TOKEN_LOGO_S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .s3.secret.name }}
                  key: {{ .s3.secret.secretKeyKey }}


          ports:
            - name: api
              containerPort: {{ .port }}

      imagePullSecrets:
        - name: regcred
  revisionHistoryLimit: 2
{{ end }}
{{ end }}
